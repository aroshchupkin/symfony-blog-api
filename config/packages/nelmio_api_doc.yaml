nelmio_api_doc:
  documentation:
    servers:
      - url: http://localhost:8000
        description: API over HTTP
    #      - url: https://api.example.com/secured
    #        description: API over HTTPS
    info:
      title: Symfony Blog API
      description: This is an awesome app!
      version: 1.0.0
    #      x-build: #CommitHash
    tags:
      - name: Authentication
      - name: Posts
      - name: Comments
    components:
      securitySchemes:
        Bearer:
          type: http
          scheme: bearer
          bearerFormat: JWT

      requestBodies:
        RegistrationRequest:
          description: 'Register a new user'
          required: true
          content:
            application/json:
              schema:
                type: object
                required: [ username, email, password ]
                properties:
                  username:
                    type: string
                    example: Joey
                  email:
                    type: string
                    format: email
                    example: joey@gmail.com
                  password:
                    type: string
                    format: password
                    example: joey@gmail.com

        LoginRequest:
          description: User credentials for authentication
          required: true
          content:
            application/json:
              schema:
                type: object
                required: [ email, password ]
                properties:
                  email:
                    type: string
                    format: email
                    example: joey@gmail.com
                  password:
                    type: string
                    format: password
                    example: joey@gmail.com

        PostRequest:
          description: Create or update a post
          required: true
          content:
            application/json:
              schema:
                type: object
                required: [ title, content ]
                properties:
                  title:
                    type: string
                    example: My First Post
                  content:
                    type: string
                    example: This is the content of my first post.

        CommentRequest:
          description: Create or update a comment
          required: true
          content:
            application/json:
              schema:
                type: object
                required: [ content ]
                properties:
                  content:
                    type: string
                    example: Great post!

      responses:
        RegistrationSuccess:
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                  code:
                    type: string
                    example: REGISTRATION_SUCCESS
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...

        LoginSuccess:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...
                  user:
                    $ref: '#/components/schemas/User'

        ProfileSuccess:
          description: User profile data
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'

        PostSuccess:
          description: Post data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

        PostListSuccess:
          description: List of posts with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/PostList'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

        PostCreated:
          description: Post created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Post created successfully
                  code:
                    type: string
                    example: POST_CREATED
                  post:
                    $ref: '#/components/schemas/Post'

        PostUpdated:
          description: Post updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Post updated successfully
                  code:
                    type: string
                    example: POST_UPDATED
                  post:
                    $ref: '#/components/schemas/Post'

        PostDeleted:
          description: Post deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Post deleted successfully
                  code:
                    type: string
                    example: POST_DELETED

        CommentSuccess:
          description: Comment data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

        CommentListSuccess:
          description: List of comments with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/CommentList'
                  pagination:
                    $ref: '#/components/schemas/Pagination'

        CommentCreated:
          description: Comment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Comment created successfully
                  code:
                    type: string
                    example: COMMENT_CREATED
                  comment:
                    $ref: '#/components/schemas/Comment'

        CommentUpdated:
          description: Comment updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Comment updated successfully
                  code:
                    type: string
                    example: COMMENT_UPDATED
                  comment:
                    $ref: '#/components/schemas/Comment'

        CommentDeleted:
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Comment deleted successfully
                  code:
                    type: string
                    example: COMMENT_DELETED

        ValidationError:
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Validation failed
                  code:
                    type: string
                    example: VALIDATION_ERROR
                  details:
                    type: object

        EmailExists:
          description: Email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email already exists.
                  code:
                    type: string
                    example: EMAIL_EXISTS

        Unauthorized:
          description: User not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not authenticated
                  code:
                    type: string
                    example: NOT_AUTHENTICATED

        InvalidCredentials:
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: Invalid credentials.

        Forbidden:
          description: Access denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Access denied
                  code:
                    type: string
                    example: ACCESS_DENIED

        NotFound:
          description: Resource not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Resource not found
                  code:
                    type: string
                    example: NOT_FOUND

        BadRequest:
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid input data
                  code:
                    type: string
                    example: BAD_REQUEST

      parameters:
        PageParameter:
          name: page
          description: Page number
          in: query
          required: false
          schema:
            type: integer
            default: '%app.pagination.default_page%'
            minimum: '%app.pagination.min_limit%'

        LimitParameter:
          name: limit
          description: Items per page
          in: query
          required: false
          schema:
            type: integer
            default: '%app.pagination.default_limit%'
            minimum: '%app.pagination.min_limit%'
            maximum: '%app.pagination.max_limit%'

        PostIdParameter:
          name: id
          description: Post ID
          in: path
          required: true
          schema:
            type: integer

        CommentIdParameter:
          name: id
          description: Comment ID
          in: path
          required: true
          schema:
            type: integer

        PostIdPathParameter:
          name: postId
          description: Post ID
          in: path
          required: true
          schema:
            type: integer

      schemas:
        Pagination:
          type: object
          properties:
            currentPage:
              type: integer
              example: 1
            totalPages:
              type: integer
              example: 5
            totalItems:
              type: integer
              example: 50
            itemsPerPage:
              type: integer
              example: '%app.pagination.default_limit%'

    security:
      - Bearer: [ ]

  areas: # to filter documented areas
    path_patterns:
      - ^/api(?!/doc$) # Accepts routes under /api except /api/doc
  models:
    names:
      - { alias: User, type: App\Entity\User, groups: [ user:detail ] }
      - { alias: Post, type: App\Entity\Post, groups: [ post:detail ] }
      - { alias: PostList, type: App\Entity\Post, groups: [ post:list ] }
      - { alias: Comment, type: App\Entity\Comment, groups: [ comment:detail ] }
      - { alias: CommentList, type: App\Entity\Comment, groups: [ comment:list ] }
